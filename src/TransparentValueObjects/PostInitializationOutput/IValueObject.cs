using System.Diagnostics.CodeAnalysis;

namespace TransparentValueObjects.PostInitializationOutput;

[SuppressMessage("ReSharper", "InconsistentNaming")]
public static class IValueObject
{
    public const string Name = nameof(IValueObject);
    public const string GlobalName = $"global::{Constants.Namespace}.{Name}";
    public const string HintName = $"{Name}.g.cs";

    public const string SourceCode = /*lang=csharp*/
$$"""
{{Constants.AutoGeneratedHeader}}

namespace {{Constants.Namespace}}
{
    /// <summary>
    /// Represents a value object.
    /// </summary>
    /// <remarks>
    /// This is the non-generic interface.
    /// </remarks>
    /// <seealso cref="{{Name}}{TInnerValue}"/>
    public interface {{Name}}
    {
        /// <summary>
        /// Gets the type of the inner value.
        /// </summary>
        public static abstract global::System.Type InnerValueType { get; }
    }

    /// <summary>
    /// Represents a value object.
    /// </summary>
    /// <remarks>
    /// This is the generic interface.
    /// </remarks>
    /// <seealso cref="{{Name}}"/>
    /// <typeparam name="TInnerValue">The type of the inner value.</typeparam>
    public interface {{Name}}<TInnerValue> : {{Name}} where TInnerValue : notnull { }
}
""";
}
