namespace TransparentValueObjects.PostInitializationOutput;

public static class ValueObjectAttribute
{
    public const string Name = nameof(ValueObjectAttribute);
    public const string GlobalName = $"global::{Constants.Namespace}.{Name}";
    public const string HintName = $"{Name}.g.cs";

    public const string SourceCode = /*lang=csharp*/
$$"""
{{Constants.AutoGeneratedHeader}}

namespace {{Constants.Namespace}}
{
    /// <summary>
    /// Indicates that the struct is a value object.
    /// </summary>
    /// <typeparam name="TInnerValue">The type of the inner value.</typeparam>
    {{Constants.CodeCoverageAttribute}}
    [global::System.AttributeUsage(global::System.AttributeTargets.Struct)]
    internal class {{Name}}<TInnerValue> : global::System.Attribute
        where TInnerValue : notnull { }
}
""";
}
