using System.Diagnostics.CodeAnalysis;
using Xunit;

namespace TransparentValueObjects.Tests.PostInitializationOutput.AugmentInterfaces;

[SuppressMessage("ReSharper", "InconsistentNaming")]
public class IDefaultEqualityComparerTests
{
    private const string Expected = /*lang=csharp*/
"""
// <auto-generated/>

namespace TransparentValueObjects
{
	/// <summary>
	/// Represents the interface for <see cref="global::TransparentValueObjects.DefaultEqualityComparerAugment"/>
	/// with members that the consumer has to implement to support the augment.
	/// </summary>
	public interface IDefaultEqualityComparer<out TValueObject, TInnerValue>
		where TValueObject : global::TransparentValueObjects.IValueObject<TInnerValue>
		where TInnerValue : notnull
	{
		/// <summary>
		/// Gets a equality comparer for the inner value type to be used by default.
		/// </summary>
		public static abstract global::System.Collections.Generic.IEqualityComparer<TInnerValue> InnerValueDefaultEqualityComparer { get; }
	}
}
""";

    [Fact]
    public void Test_Source()
    {
        TestHelpers.TestPostInitializationOutput("IDefaultEqualityComparer.g.cs", Expected);
    }
}
