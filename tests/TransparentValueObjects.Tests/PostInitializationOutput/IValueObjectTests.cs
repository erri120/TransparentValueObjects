using System.Diagnostics.CodeAnalysis;
using Xunit;

namespace TransparentValueObjects.Tests.PostInitializationOutput;

[SuppressMessage("ReSharper", "InconsistentNaming")]
public class IValueObjectTests
{
    private const string Expected = /*lang=csharp*/
"""
// <auto-generated/>

namespace TransparentValueObjects
{
	/// <summary>
	/// Represents a value object.
	/// </summary>
	/// <remarks>
	/// This is the non-generic interface.
	/// </remarks>
	/// <seealso cref="IValueObject{TInnerValue}"/>
	public interface IValueObject
	{
		/// <summary>
		/// Gets the type of the inner value.
		/// </summary>
		public static abstract global::System.Type InnerValueType { get; }
	}

	/// <summary>
	/// Represents a value object.
	/// </summary>
	/// <remarks>
	/// This is the generic interface.
	/// </remarks>
	/// <seealso cref="IValueObject"/>
	/// <typeparam name="TInnerValue">The type of the inner value.</typeparam>
	public interface IValueObject<TInnerValue> : IValueObject where TInnerValue : notnull { }
}
""";

    [Fact]
    public void Test_Source()
    {
        TestHelpers.TestPostInitializationOutput("IValueObject.g.cs", Expected);
    }
}
